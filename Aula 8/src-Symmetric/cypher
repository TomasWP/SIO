import hashlib
import os

def generate_key_and_iv(password):
    # Parameters for PBKDF2
    salt = os.urandom(16)  # 16 bytes of random salt
    iterations = 10000  # You can adjust the number of iterations as needed

    # Generate key and IV
    key_iv = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, iterations, dklen=32)  # 32 bytes for 256 bits

    # Split key and IV
    key = key_iv[:16]  # 128 bits for key
    iv = key_iv[16:]  # 128 bits for IV

    return key, iv

# Example usage:
password = "your_password_here"
key, iv = generate_key_and_iv(password)

# Use the key and IV as needed for encryption or decryption
print("Key:", key)
print("IV:", iv)
